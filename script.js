// --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
const STORAGE_KEY = 'christmas_tree_word_cloud_words';
// –ù–∞–±–æ—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞. –î–û–ü–û–õ–ù–ò–¢–ï —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫!
const PROFANITY_WORDS = ['–ø–ª–æ—Ö–æ–µ', '—Å–ª–æ–≤–æ', '–º–∞—Ç', '—Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ', 'f*ck', 'sh*t', '–±–ª–∏–Ω']; 

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ LocalStorage
 */
function loadWords() {
    const json = localStorage.getItem(STORAGE_KEY);
    return json ? JSON.parse(json) : [];
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞ –≤ LocalStorage
 */
function saveWords(words) {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(words));
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ–≤–æ –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É.
 */
function isProfane(word) {
    const cleanWord = word.toLowerCase();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö
    return PROFANITY_WORDS.some(profane => cleanWord.includes(profane));
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
 */
function addWord(word) {
    let words = loadWords();
    
    if (isProfane(word)) {
        alert('–≠—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ. üö´');
        return; 
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (!words.includes(word)) {
        words.push(word);
        saveWords(words);
        drawWordCloud();
        return true;
    } else {
        alert('–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ. ‚ùÑÔ∏è');
        return false;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
 */
function removeWord(word) {
    let words = loadWords();
    const newWords = words.filter(w => w !== word);
    saveWords(newWords);
    
    if (document.getElementById('word-list-editor')) {
        renderEditorList(newWords);
    }
    drawWordCloud();
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç [['—Å–ª–æ–≤–æ', –≤–µ—Å], ...]
 */
function processWordsForCloud(words) {
    // –°–ª—É—á–∞–π–Ω—ã–π –≤–µ—Å –æ—Ç 4 –¥–æ 10 –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    return words.map(word => [word, 4 + Math.random() * 6]);
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ–±–ª–∞–∫–æ —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–µ –µ–ª–∫–∏.
 */
function drawWordCloud() {
    const canvas = document.getElementById('word-cloud-canvas');
    if (!canvas) return; 
    
    const words = loadWords();
    const list = processWordsForCloud(words);
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±–ª–∞–∫–∞
    WordCloud(canvas, { clearCanvas: true });

    // --- –ù–ê–°–¢–†–û–ô–ö–ê –§–û–†–ú–´ –Å–õ–ö–ò ---
    
    // 1. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PNG-–º–∞—Å–∫—É (–Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è —ë–ª–∫–∞)
    const image = new Image();
    // –í–∞–º –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª 'elka_mask.png' (—á–µ—Ä–Ω–∞—è –µ–ª–∫–∞ –Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–º —Ñ–æ–Ω–µ)
    image.src = 'elka_mask.png'; 
    
    image.onload = function() {
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PNG-–º–∞—Å–∫–∏
        WordCloud(canvas, {
            list: list,
            gridSize: 7, 
            weightFactor: 8,
            fontFamily: 'Comfortaa',
            color: '#BEE3DB', // –¶–≤–µ—Ç —Å–ª–æ–≤ (—Å–Ω–µ–≥)
            backgroundColor: 'rgba(0,0,0,0)',
            rotateRatio: 0,
            mask: image, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –º–∞—Å–∫—É
            width: canvas.width,
            height: canvas.height
        });
    };
    
    image.onerror = function() {
        console.warn("–ú–∞—Å–∫–∞ 'elka_mask.png' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ 'star' (–∑–≤–µ–∑–¥–∞).");
        // 2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ 'star' (–∑–≤–µ–∑–¥–∞)
        WordCloud(canvas, {
            list: list,
            gridSize: 7, 
            weightFactor: 8,
            fontFamily: 'Comfortaa',
            color: '#BEE3DB',
            backgroundColor: 'rgba(0,0,0,0)',
            rotateRatio: 0,
            shape: 'star', // –§–æ—Ä–º–∞ –∑–≤–µ–∑–¥—ã
            width: canvas.width,
            height: canvas.height
        });
    };
    // ----------------------------
}

// --- –õ–û–ì–ò–ö–ê –î–õ–Ø index.html (–í–í–û–î –°–õ–û–í) ---
const wordForm = document.getElementById('word-form');
if (wordForm) {
    wordForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const wordInput = document.getElementById('word-input');
        const word = wordInput.value.trim();
        
        if (word) {
            if (addWord(word)) {
                wordInput.value = '';
            }
        }
    });
    
    drawWordCloud(); // –ó–∞–ø—É—Å–∫ –æ–±–ª–∞–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
}

// --- –õ–û–ì–ò–ö–ê –î–õ–Ø editor.html (–†–ï–î–ê–ö–¢–û–†) ---

/**
 * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
function renderEditorList(words) {
    const listElement = document.getElementById('word-list-editor');
    if (!listElement) return;

    listElement.innerHTML = '';
    
    words.forEach(word => {
        const li = document.createElement('li');
        li.innerHTML = `
            <span>${word}</span>
            <button data-word="${word}">–£–¥–∞–ª–∏—Ç—å</button>
        `;
        listElement.appendChild(li);
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è
    listElement.querySelectorAll('button').forEach(button => {
        button.addEventListener('click', function() {
            const wordToRemove = this.getAttribute('data-word');
            if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ "${wordToRemove}"?`)) {
                removeWord(wordToRemove);
            }
        });
    });
}

const editorList = document.getElementById('word-list-editor');
if (editorList) {
    const initialWords = loadWords();
    renderEditorList(initialWords);
}
