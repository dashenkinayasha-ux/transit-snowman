// --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
const STORAGE_KEY = 'snowman_word_cloud_words';
// –ù–∞–±–æ—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
const PROFANITY_WORDS = ['–ø–ª–æ—Ö–æ–µ', '—Å–ª–æ–≤–æ', '–º–∞—Ç', '—Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ']; 

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ LocalStorage
 * @returns {Array} –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤.
 */
function loadWords() {
    const json = localStorage.getItem(STORAGE_KEY);
    return json ? JSON.parse(json) : [];
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞ –≤ LocalStorage
 * @param {Array} words –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
 */
function saveWords(words) {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(words));
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ–≤–æ –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É.
 * @param {string} word –°–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
 * @returns {boolean} true, –µ—Å–ª–∏ —Å–ª–æ–≤–æ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–º.
 */
function isProfane(word) {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ PROFANITY_WORDS
    return PROFANITY_WORDS.includes(word.toLowerCase());
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
 * @param {string} word –°–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
 */
function addWord(word) {
    let words = loadWords();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    if (isProfane(word)) {
        alert('–≠—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–Ω–µ–≥–æ–≤–∏–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ. üö´');
        return; 
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
    if (!words.includes(word)) {
        words.push(word);
        saveWords(words);
        drawWordCloud(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –æ–±–ª–∞–∫–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        return true;
    } else {
        alert('–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ. ‚ùÑÔ∏è');
        return false;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ editor.html).
 * @param {string} word –°–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
 */
function removeWord(word) {
    let words = loadWords();
    const newWords = words.filter(w => w !== word);
    saveWords(newWords);
    
    // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
    if (document.getElementById('word-list-editor')) {
        renderEditorList(newWords);
    }
    drawWordCloud(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –æ–±–ª–∞–∫–æ
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç, –Ω—É–∂–Ω—ã–π wordcloud2.js: [['—Å–ª–æ–≤–æ', –≤–µ—Å], ...]
 * –í–µ—Å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–º.
 * @param {Array} words –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤.
 * @returns {Array<Array>} –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —Å –≤–µ—Å–∞–º–∏.
 */
function processWordsForCloud(words) {
    // –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤–µ—Å (—Ä–∞–∑–º–µ—Ä).
    // –î–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –º–æ–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É, –¥–ª–∏–Ω—É –∏ —Ç.–¥.
    return words.map(word => [word, 1 + Math.random() * 5]); // –°–ª—É—á–∞–π–Ω—ã–π –≤–µ—Å –æ—Ç 1 –¥–æ 6
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ–±–ª–∞–∫–æ —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–µ —Å–Ω–µ–≥–æ–≤–∏–∫–∞.
 */
function drawWordCloud() {
    const canvas = document.getElementById('word-cloud-canvas');
    if (!canvas) return; // –í—ã—Ö–æ–¥, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ editor.html)
    
    const words = loadWords();
    const list = processWordsForCloud(words);
    
    const container = document.getElementById('word-cloud-container');

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±–ª–∞–∫–∞
    WordCloud(canvas, { clearCanvas: true });

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–Ω–µ–≥–æ–≤–∏–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É 'circle' –∏ CSS –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã)
    // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ wordcloud2.js –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é SVG/PNG –º–∞—Å–∫—É, 
    // –Ω–æ 'circle' —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å CSS-—Ñ–æ—Ä–º–æ–π. 
    // –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–Ω–µ–≥–æ–≤–∏–∫–∞ –ø—Ä–∏—à–ª–æ—Å—å –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å d3-cloud —Å –º–∞—Å–∫–æ–π.

    WordCloud(canvas, {
        list: list,
        gridSize: 10,
        weightFactor: 5, // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞
        fontFamily: 'Comfortaa',
        color: '#BEE3DB', // –¶–≤–µ—Ç —Å–Ω–µ–≥–∞
        backgroundColor: 'rgba(0,0,0,0)', // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        drawOutOfBound: false,
        shuffle: true,
        rotateRatio: 0, // –ù–µ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å —Å–ª–æ–≤–∞
        // –§–æ—Ä–º–∞ 'circle' –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —à–∞—Ä–∞ —Å–Ω–µ–≥–æ–≤–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è CSS-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
        shape: 'circle', 
        ellipticity: 1,
        // –î–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ —Ç–µ–º–Ω–æ-—Å–∏–Ω–µ–º
        // Text-shadow –∑–∞–¥–∞–¥–∏–º —á–µ—Ä–µ–∑ —Å—Ç–∏–ª–∏.
    });
}

// --- –õ–û–ì–ò–ö–ê –î–õ–Ø index.html (–í–í–û–î –°–õ–û–í) ---
const wordForm = document.getElementById('word-form');
if (wordForm) {
    wordForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const wordInput = document.getElementById('word-input');
        const word = wordInput.value.trim();
        
        if (word) {
            if (addWord(word)) {
                wordInput.value = ''; // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            }
        }
    });
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±–ª–∞–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    drawWordCloud();
}

// --- –õ–û–ì–ò–ö–ê –î–õ–Ø editor.html (–†–ï–î–ê–ö–¢–û–†) ---

/**
 * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param {Array} words –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤.
 */
function renderEditorList(words) {
    const listElement = document.getElementById('word-list-editor');
    if (!listElement) return;

    listElement.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞
    
    words.forEach(word => {
        const li = document.createElement('li');
        li.innerHTML = `
            <span>${word}</span>
            <button data-word="${word}">–£–¥–∞–ª–∏—Ç—å</button>
        `;
        listElement.appendChild(li);
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è
    listElement.querySelectorAll('button').forEach(button => {
        button.addEventListener('click', function() {
            const wordToRemove = this.getAttribute('data-word');
            if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ "${wordToRemove}"?`)) {
                removeWord(wordToRemove);
            }
        });
    });
}

const editorList = document.getElementById('word-list-editor');
if (editorList) {
    const initialWords = loadWords();
    renderEditorList(initialWords);
}